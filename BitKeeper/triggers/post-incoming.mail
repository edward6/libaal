#!/bin/sh
#
# A BitKeeper commit-message trigger
#
# Copyright (C) 2002 by Hans Reiser <reiser@namesys.com>
# Author Joshua MacDonald <jmacd@namesys.com>
#

# User-defined variables

# Mail recipient
MAILTO="reiserfs-bk@namesys.com"
# Subject prefix
SPREFIX="[v4-progs]"
# Limit of modified files length in subject
SLIMIT=40

# Local variables
RSETFILE=/tmp/mail.rset.$$
OUTFILE=/tmp/mail.out.$$

# Cleanup
cp /dev/null $OUTFILE
trap "rm -f $RSETFILE $OUTFILE" 0

# Avoid commands that do nothing
if test "X$BK_STATUS" != XOK; then
    #echo "Status not okay"
    exit 0
fi

# Only interested in incoming push
if test "X$BK_EVENT" != "Xincoming push"; then
    #echo "Not an incoming push"
    exit 0
fi

# Expecting have a change set list
if test "X$BK_CSETLIST" == X; then
    echo "Unexpected input: no BK_CSETLIST"
    exit 0
fi

function export_patch() # parent, version
{
  rspec=""
  
  if test -z "$2"; then
    return;
  fi

  if test "$1" != "$2"; then
    rspec="$1,$2"
  else
    rspec="$2"
  fi

  echo "# bk export -tpatch -r$rspec" >> $OUTFILE
  echo "# --------------------------------------------" >> $OUTFILE
  bk -R export -T -tpatch -du -r$rspec                           \
    | tail +5 -                                                  \
    | grep -v "^#$"                                              \
    | grep -v "^# The following is the BitKeeper ChangeSet Log$" \
    >> $OUTFILE
  echo >> $OUTFILE
}

# Scan the list of changesets
CSETS_COMMA=
CSETS_REAL=
FIRST_PARENT=
LAST_VERSION=
EXPORT_PARENT=
EXPORT_VERSION=
for cset in `cat $BK_CSETLIST`; do 

  # Test if it is a mergeset
  if test -z `bk -R prs -h -C$cset -d':MPARENT:' ChangeSet`; then
    CSETS_REAL="$CSETS_REAL $cset"
    LAST_VERSION="$cset"
    EXPORT_VERSION="$cset"
    mset=
  else
    mset="(merge)"
  fi

  # Save the parent of the first changeset
  if test -z "$FIRST_PARENT"; then
    FIRST_PARENT=`bk -R prs -h -C$cset -d':PARENT:' ChangeSet`
    EXPORT_PARENT="$FIRST_PARENT"
  fi

  # Build a comma-separated list
  if test -z "${CSETS_COMMA}"; then
    CSETS_COMMA="$cset$mset"
  else
    CSETS_COMMA="$CSETS_COMMA, $cset$mset"
  fi

  if test "$mset"; then
    # Export diffs up to, not including, each merge.
    export_patch "$EXPORT_PARENT" "$EXPORT_VERSION"
    EXPORT_PARENT="$cset"
    EXPORT_VERSION=""
  fi
done

# Export the last range of changes
export_patch "$EXPORT_PARENT" "$EXPORT_VERSION"

# Use 'bk rset' to list changed files, versions, excluding ChangeSet
# save to temp file.
bk -R rset -r"$FIRST_PARENT,$LAST_VERSION"  \
  | grep -v ^ChangeSet                      \
  > $RSETFILE

# Build a list of modified files for the subject, and a shorter
# version for the subject.
MODFILES=
SMODFILES=
for mline in `cat $RSETFILE`; do

  mfile=`echo $mline | cut --delim=\| -f1`
  mspec=`echo $mline | cut --delim=\| -f2`

  if test -z "$MODFILES"; then
    MODFILES="$mfile"
  else
    MODFILES="$MODFILES $mfile"
  fi
  if test `echo $SMODFILES | wc -c` -lt $SLIMIT; then
    if test -z "$SMODFILES"; then
      SMODFILES="$mfile"
    else
      SMODFILES="$SMODFILES $mfile"
    fi
  fi
done

# If no modified files, show it
if test -z "$MODFILES"; then
  SMODFILES="<nothing modified>"
  MODFILES="<nothing modified>"
fi

# If the subject list is truncated...
if test "$SMODFILES" != "$MODFILES"; then
  SMODFILES="$SMODFILES..."
fi

# And the subject is:
SUBJECT="$SPREFIX $SMODFILES"

# Start generating output
(
echo "Changes by:  ${BK_USER}@${BK_HOST} at" `date`
echo "Repository:  ${BKD_HOST}:${BKD_ROOT}"
echo "Change sets: ${CSETS_COMMA}"
echo "Modified:    ${MODFILES}"
echo

cat $OUTFILE
) | mail -s "${SUBJECT}" ${MAILTO}
